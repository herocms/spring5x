<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 数据源配置资源引入 -->
    <!--druid.xml 配置-->
    <import resource="classpath:META-INF/spring/datasource/spring-druid.xml"/>
    <!--c3p0.xml 配置-->
    <!--<import resource="classpath:META-INF/spring/datasource/spring-c3p0.xml"/>-->

    <!-- Hibernate 配置  BEGIN -->

    <!-- **************配置SessionFactory工厂*************** -->

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"/>

        <!-- 自动扫描注解：实体类，使用注解@Entity，@Table，@Id等等，不需要hbm.xml -->
<!--        <property name="packagesToScan">
            <list>
                <value>com.zja.entity</value>
            </list>
        </property>-->

        <!--自动扫描配置：*.hbm.xml，可不使用packagesToScan-->
        <!--<property name="mappingLocations" value="classpath*:com/zja/entity/*.hbm.xml"/>-->

        <!--自动扫描配置：*.hbm.xml,可不使用packagesToScan-->
        <property name="mappingLocations">
            <list>
                <!--添加扫描*.hbm.xml文件的路径-->
                <value>classpath*:/hbm/*.hbm.xml</value>
                <!--<value>classpath*:com/zja/entity/*.hbm.xml</value>-->
            </list>
        </property>

        <!-- 配置 hibernate-1.cfg.xml 中的信息 -->
        <property name="hibernateProperties">
            <props>
                <!--数据库方言:Hibernate-5.2.10 之后使用的方言需要升级-->
                <!--mysql新版本方言:创建表时,引擎engine=MyISAM，优点：查询很快，缺点：不支持事务处理和外键约束-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>-->
                <!--mysql新版本方言:创建表时,引擎engine=InnoDB，优点：支持事务处理和外键约束，缺点：查询很慢，(推荐使用)-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>-->

                <!--oracle新版本方言: 支持版本10g和11g-->
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>

                <!--default_schema：oracle设置用户名:duke，mysql设置数据库名称:test。不推荐使用：默认自动识别-->
                <!--<prop key="hibernate.default_schema">duke</prop>-->
                <!--<prop key="hibernate.default_schema">test</prop>-->

                <!--create每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因
                    create-drop加载hibernate时删除表再创建表，退出时删除表结构
                    update加载hibernate自动更新数据库结构,建议禁用update，问题太多(比如第二次运行项目，bug会再次创建表，这时表已存在，报错)
                    validate加载hibernate时，验证创建数据库表结构,只会和数据库中的表进行比较，不会创建新表，但是会插入新值
                    none不是用此功能(推荐使用) -->
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <!--打印sql语句-->
                <prop key="hibernate.show_sql">true</prop>
                <!--sql格式化-->
                <prop key="hibernate.format_sql">true</prop>
                <!--禁用 jdbc元数据默认值-->
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
            </props>
        </property>
    </bean>


    <!-- **************配置事务管理器*************** -->

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 注解方式(配置事物)：通过@Transactional启用事物管理，xml方式的配置会覆盖注解配置 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->

    <!-- XML方式(配置事物):配置事务特性，配置add，delete，update开始的方法，事务传播特性为required -->
    <!-- 配置事务通知属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 定义事务传播属性 -->
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="set*" propagation="REQUIRED"/>
            <tx:method name="new*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="execute*" propagation="REQUIRED"/>
            <tx:method name="change*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置那些类的方法进行事务管理，当前com.sy.crm.service包中的子包，类中所有方法需要，还需要参考tx:advice的设置 -->
    <!--dao是原子的数据库操作
        service层可以把多个原子的数据库操作组合
        为了让一个事务里面可以进行多个数据库操作，因此把事务放在service层-->
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution(* com.zja.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod"/>
    </aop:config>


    <!-- **************配置hibernateTemplate 操作模板*************** -->

    <!-- 配置HibernateTemplate模板操作类,Spring调用 Hibernate 的持久化操作,HibernateTemplate是线程安全的  -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- spring与hibernate整合后默认必须在事务下对数据库执行写操作，如果将checkWriteOperations设置为false则没有事务也可写数据库，这样是为了单独测试dao方便 -->
        <!--上面已经配置了事务，注释掉下方代码-->
        <!--<property name="checkWriteOperations" value="false"/>-->
    </bean>
    <!-- Hibernate 配置  END -->

</beans>